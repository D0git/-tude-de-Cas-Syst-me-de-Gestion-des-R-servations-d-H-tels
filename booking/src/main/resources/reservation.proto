syntax = "proto3";
option java_package = "com.project.booking.stubs";
option java_multiple_files = true;

// Enumeration pour le type de chambre

enum TypeChambre {
  SIMPLE = 0;
  DOUBLE = 1;
}

// Message représentant une chambre
message Chambre {
  int64 id = 1;
  string prix = 2;
  bool disponible = 3;
  TypeChambre type = 4;
}

// Message représentant un client
message Client {
  int64 id = 1;
  string nom = 2;
  string prenom = 3;
  string email = 4;
  string  telephone = 5;
}

// Message représentant une preference
message Preference {
  int64 id = 1;
  string nom = 2;
}

// Message représentant une preference
message PreferenceDTO {
  string nom = 1;
}

// Message représentant une reservation
message Reservation {
  int64 id = 1;
  string dateDebut = 2;
  string dateFin = 3;
  Chambre chambre = 4;
  Client client = 5;
  repeated Preference preferences = 6; // Champ repeated pour les préférences
}

// Message représentant une reservation
message ReservationDTO {
  string dateDebut = 1;
  string dateFin = 2;
  int64 chambreId = 3;
  int64 clientId = 4;
  repeated PreferenceDTO preferences = 5; // Champ repeated pour les préférences
}

// Requete pour obtenir tous les chambres
message getAllChambresRequest{}

// Réponse contenant la liste des chambres
message getAllChambresResponse {
  repeated Chambre chambres = 1;
}

// Requete pour obtenir tous les preferences
message getAllPreferencesRequest{}
// Réponse contenant la liste des preferences
message getAllPreferencesResponse {
  repeated Preference preferences = 1;
}


// Requete pour obtenir tous les reservations
message getAllReservationsRequest{}
// Réponse contenant la liste des reservations
message getAllReservationsResponse {
  repeated Reservation reservations = 1;
}


// Requete pour obtenir une reservation par son id
message getReservationByIdRequest{
  string id = 1;
}
// Réponse contenant la liste des reservations
message getReservationByIdResponse {
  Reservation reservation = 1;
}


// Requete pour supprimer une reservation par son id
message deleteReservationByIdRequest{
  string id = 1;
}
message DeleteReservationResult {
  string result = 1;
}
// Requete pour ajouer une reservation
message  deleteReservationByIdResponse{
    DeleteReservationResult deleted = 1;
}


// Requête pour ajouter une reservation
message saveReservationRequest {
  ReservationDTO reservation = 1;
}

// Réponse contenant la reservation sauvegardée
message saveReservationResponse {
  Reservation reservation = 1;
}


// Requête pour modifier une reservation
message updateReservationRequest {
  ReservationDTO reservation = 1;
  int64 id = 2;
}
// Réponse contenant la reservation modifiée
message updateReservationResponse {
  Reservation reservation = 1;
}

// Définition du service correspondant aux requêtes et mutations GraphQL
service ReservationService {
  // Équivalent de la requête allReservations
  rpc AllReservations(getAllReservationsRequest) returns (getAllReservationsResponse);

  // Équivalent de la requête allReservations
  rpc AllChambres(getAllChambresRequest) returns (getAllChambresResponse);
  // Équivalent de la requête allReservations
  rpc AllPreferences(getAllPreferencesRequest) returns (getAllPreferencesResponse);
  // Équivalent de la requête reservationById
  rpc ReservationById(getReservationByIdRequest) returns (getReservationByIdResponse);

  // Équivalent de la mutation saveReservation
  rpc SaveReservation(saveReservationRequest) returns (saveReservationResponse);

  // Équivalent de la mutation updateReservation
  rpc UpdateReservation(updateReservationRequest) returns (updateReservationResponse);

  // Équivalent de la mutation deleteReservationById
  rpc DeleteReservationById(deleteReservationByIdRequest) returns (deleteReservationByIdResponse);
}